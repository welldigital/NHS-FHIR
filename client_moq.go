// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"context"
	"net/http"
	"sync"
)

// Ensure, that IClientMock does implement IClient.
// If this is not the case, regenerate this file with moq.
var _ IClient = &IClientMock{}

// IClientMock is a mock implementation of IClient.
//
// 	func TestSomethingThatUsesIClient(t *testing.T) {
//
// 		// make and configure a mocked IClient
// 		mockedIClient := &IClientMock{
// 			DoFunc: func(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {
// 				panic("mock out the Do method")
// 			},
// 			NewRequestFunc: func(method string, path string, body interface{}) (*http.Request, error) {
// 				panic("mock out the NewRequest method")
// 			},
// 		}
//
// 		// use mockedIClient in code that requires IClient
// 		// and then make assertions.
//
// 	}
type IClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, req *http.Request, v interface{}) (*Response, error)

	// NewRequestFunc mocks the NewRequest method.
	NewRequestFunc func(method string, path string, body interface{}) (*http.Request, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *http.Request
			// V is the v argument value.
			V interface{}
		}
		// NewRequest holds details about calls to the NewRequest method.
		NewRequest []struct {
			// Method is the method argument value.
			Method string
			// Path is the path argument value.
			Path string
			// Body is the body argument value.
			Body interface{}
		}
	}
	lockDo         sync.RWMutex
	lockNewRequest sync.RWMutex
}

// Do calls DoFunc.
func (mock *IClientMock) Do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {
	if mock.DoFunc == nil {
		panic("IClientMock.DoFunc: method is nil but IClient.Do was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *http.Request
		V   interface{}
	}{
		Ctx: ctx,
		Req: req,
		V:   v,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, req, v)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedIClient.DoCalls())
func (mock *IClientMock) DoCalls() []struct {
	Ctx context.Context
	Req *http.Request
	V   interface{}
} {
	var calls []struct {
		Ctx context.Context
		Req *http.Request
		V   interface{}
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}

// NewRequest calls NewRequestFunc.
func (mock *IClientMock) NewRequest(method string, path string, body interface{}) (*http.Request, error) {
	if mock.NewRequestFunc == nil {
		panic("IClientMock.NewRequestFunc: method is nil but IClient.NewRequest was just called")
	}
	callInfo := struct {
		Method string
		Path   string
		Body   interface{}
	}{
		Method: method,
		Path:   path,
		Body:   body,
	}
	mock.lockNewRequest.Lock()
	mock.calls.NewRequest = append(mock.calls.NewRequest, callInfo)
	mock.lockNewRequest.Unlock()
	return mock.NewRequestFunc(method, path, body)
}

// NewRequestCalls gets all the calls that were made to NewRequest.
// Check the length with:
//     len(mockedIClient.NewRequestCalls())
func (mock *IClientMock) NewRequestCalls() []struct {
	Method string
	Path   string
	Body   interface{}
} {
	var calls []struct {
		Method string
		Path   string
		Body   interface{}
	}
	mock.lockNewRequest.RLock()
	calls = mock.calls.NewRequest
	mock.lockNewRequest.RUnlock()
	return calls
}
