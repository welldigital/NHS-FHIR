// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package client

import (
	"context"
	"net/http"
	"sync"
)

// Ensure, that IClientMock does implement IClient.
// If this is not the case, regenerate this file with moq.
var _ IClient = &IClientMock{}

// IClientMock is a mock implementation of IClient.
//
// 	func TestSomethingThatUsesIClient(t *testing.T) {
//
// 		// make and configure a mocked IClient
// 		mockedIClient := &IClientMock{
// 			doFunc: func(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {
// 				panic("mock out the do method")
// 			},
// 			newRequestFunc: func(method string, path string, body interface{}) (*http.Request, error) {
// 				panic("mock out the newRequest method")
// 			},
// 		}
//
// 		// use mockedIClient in code that requires IClient
// 		// and then make assertions.
//
// 	}
type IClientMock struct {
	// doFunc mocks the do method.
	doFunc func(ctx context.Context, req *http.Request, v interface{}) (*Response, error)

	// newRequestFunc mocks the newRequest method.
	newRequestFunc func(method string, path string, body interface{}) (*http.Request, error)

	// calls tracks calls to the methods.
	calls struct {
		// do holds details about calls to the do method.
		do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Req is the req argument value.
			Req *http.Request
			// V is the v argument value.
			V interface{}
		}
		// newRequest holds details about calls to the newRequest method.
		newRequest []struct {
			// Method is the method argument value.
			Method string
			// Path is the path argument value.
			Path string
			// Body is the body argument value.
			Body interface{}
		}
	}
	lockdo         sync.RWMutex
	locknewRequest sync.RWMutex
}

// do calls doFunc.
func (mock *IClientMock) do(ctx context.Context, req *http.Request, v interface{}) (*Response, error) {
	if mock.doFunc == nil {
		panic("IClientMock.doFunc: method is nil but IClient.do was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Req *http.Request
		V   interface{}
	}{
		Ctx: ctx,
		Req: req,
		V:   v,
	}
	mock.lockdo.Lock()
	mock.calls.do = append(mock.calls.do, callInfo)
	mock.lockdo.Unlock()
	return mock.doFunc(ctx, req, v)
}

// doCalls gets all the calls that were made to do.
// Check the length with:
//     len(mockedIClient.doCalls())
func (mock *IClientMock) doCalls() []struct {
	Ctx context.Context
	Req *http.Request
	V   interface{}
} {
	var calls []struct {
		Ctx context.Context
		Req *http.Request
		V   interface{}
	}
	mock.lockdo.RLock()
	calls = mock.calls.do
	mock.lockdo.RUnlock()
	return calls
}

// newRequest calls newRequestFunc.
func (mock *IClientMock) newRequest(method string, path string, body interface{}) (*http.Request, error) {
	if mock.newRequestFunc == nil {
		panic("IClientMock.newRequestFunc: method is nil but IClient.newRequest was just called")
	}
	callInfo := struct {
		Method string
		Path   string
		Body   interface{}
	}{
		Method: method,
		Path:   path,
		Body:   body,
	}
	mock.locknewRequest.Lock()
	mock.calls.newRequest = append(mock.calls.newRequest, callInfo)
	mock.locknewRequest.Unlock()
	return mock.newRequestFunc(method, path, body)
}

// newRequestCalls gets all the calls that were made to newRequest.
// Check the length with:
//     len(mockedIClient.newRequestCalls())
func (mock *IClientMock) newRequestCalls() []struct {
	Method string
	Path   string
	Body   interface{}
} {
	var calls []struct {
		Method string
		Path   string
		Body   interface{}
	}
	mock.locknewRequest.RLock()
	calls = mock.calls.newRequest
	mock.locknewRequest.RUnlock()
	return calls
}
